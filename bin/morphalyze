#! /usr/bin/ruby1.9.1
#-*- encoding: utf-8 -*-
#
# Description: Tokenize Turkish input into wordlists
# Author:      Tobias Koch <tobias.koch@gmail.com>
# License:     Public Domain
#

INSTALL_DIR = File.expand_path(File.dirname(File.symlink?(__FILE__) ?
  File.readlink(__FILE__) : __FILE__) + '/..')
$LOAD_PATH.unshift INSTALL_DIR + '/lib'

MORPHALYZER_SUCCESS          = 0
MORPHALYZER_ERROR_INVOCATION = 1
MORPHALYZER_ERROR_RUNTIME    = 2

EXECUTABLE_NAME = File.basename($0)

require 'version'
require 'getoptlong'
require 'trmorph'


def usage
  $stderr.write "TR Language Tools TRMorph Wrapper, version #{TRTOOLS_VERSION}                      \n"
  $stderr.write "Copyright 2012, Tobias Koch <tobias.koch@gmail.com>                                \n"
  $stderr.write "                                                                                   \n"
  $stderr.write "#{EXECUTABLE_NAME} [OPTIONS] <files|stdin>                                         \n"
  $stderr.write "                                                                                   \n"
  $stderr.write "OPTIONS:                                                                           \n"
  $stderr.write " --help, -h            Print this help text and exit                               \n"
  $stderr.write " --hints, -x           Attach possible word types, i.e. 'stem [type1, type2, ...]' \n"
  $stderr.write " --pass-unknown, -p    Pass through unknown words as they are                      \n"
  $stderr.write "                                                                                   \n"
end


def parse_cmd_line
  params = {
    :hint => false,
    :pass_unknown => false
  }

  opts = GetoptLong.new(
    ['--help', '-h', GetoptLong::NO_ARGUMENT ],
    ['--hints', '-x', GetoptLong::NO_ARGUMENT ],
    ['--pass-unknown', '-p', GetoptLong::NO_ARGUMENT ]
  )

  begin
    opts.quiet = true
    opts.each do |opt, arg|
      case opt
        when '--help'
          usage
          exit MORPHALYZER_SUCCESS
        when '--hints'
          params[:hint] = true
        when '--pass-unknown'
          params[:pass_unknown] = true
        else
      end
    end
  rescue GetoptLong::InvalidOption => e
    $stderr.write "#{EXECUTABLE_NAME}: #{e.message}\n"
    exit MORPHALYZER_ERROR_INVOCATION
  end

  return params
end


begin # main()

  params = parse_cmd_line
  trmorph = TRMorph.new(params)

  vocabulary = Hash.new { |h, k| h[k] = [] }
  ARGF.each_line do |line|
    line.strip!
    root_count = trmorph.find_roots(line, vocabulary)
    if root_count == 0 && params[:pass_unknown]
      vocabulary[line]
    end
  end

  vocabulary.each_pair do |word, types|
    output = word
    if params[:hint] && !types.empty?
      output += " [#{types.join(', ')}]"
    end
    puts output
  end

rescue SystemExit => e
  exit e.status
rescue Exception => e
  $stderr.write "#{EXECUTABLE_NAME}: #{e.message}\n"
  exit MORPHALYZER_ERROR_RUNTIME
end

