#! /usr/bin/ruby1.9.1
#-*- encoding: utf-8 -*-
#
# Description: Look up words online
# Author:      Tobias Koch <tobias.koch@gmail.com>
# License:     Public Domain
#

INSTALL_DIR = File.expand_path(File.dirname(File.symlink?(__FILE__) ?
  File.readlink(__FILE__) : __FILE__) + '/..')
$LOAD_PATH.unshift INSTALL_DIR + '/lib'

DICTLOOKUP_SUCCESS          = 0
DICTLOOKUP_ERROR_INVOCATION = 1
DICTLOOKUP_ERROR_RUNTIME    = 2

DICTLOOKUP_EXECUTABLE_NAME = 'dictlookup'

require 'version'
require 'getoptlong'
require 'dictlookup'


def usage
  $stderr.write "TR Language Tools online dictionary lookup, version #{TRTOOLS_VERSION}           \n"
  $stderr.write "Copyright 2012, Tobias Koch <tobias.koch@gmail.com>                              \n"
  $stderr.write "                                                                                 \n"
  $stderr.write "dictlookup [OPTIONS] <files|stdin>                                               \n"
  $stderr.write "                                                                                 \n"
  $stderr.write "OPTIONS:                                                                         \n"
  $stderr.write " --help, -h             Print this help text and exit                            \n"
  $stderr.write " --format, -f <fmt>     One of 'text' (default), 'xml', 'html'                   \n"
  $stderr.write " --provider, -p <name>  Which provider to use for the lookup, supported are:     \n"
  $stderr.write "                        * 'pons'   - use the Pons Online Dictionary              \n"
  $stderr.write "                        * 'google' - use Google Translate                        \n"
  $stderr.write " --verbose, -v          Print secondary results and catch phrases                \n"
  $stderr.write "                                                                                 \n"
end


def parse_cmd_line
  params = {
    :provider => :pons,
    :verbose  => false,
    :format   => :text
  }

  opts = GetoptLong.new(
    ['--help', '-h', GetoptLong::NO_ARGUMENT ],
    ['--provider', '-p', GetoptLong::REQUIRED_ARGUMENT ],
    ['--format', '-f', GetoptLong::REQUIRED_ARGUMENT ],
    ['--verbose', '-v', GetoptLong::NO_ARGUMENT ]
  )

  begin
    opts.quiet = true
    opts.each do |opt, arg|
      case opt
        when '--help'
          usage
          exit DICTLOOKUP_SUCCESS
        when '--format'
          unless [ 'text', 'xml', 'html' ].include? arg
            msg = "unknown format option '#{arg}'"
            raise GetoptLong::InvalidOption msg
          end
          params[:format] = arg.intern
        when '--provider'
          unless [ 'pons', 'google' ].include? arg
            msg = "unknown provider '#{arg}"
            raise GetoptLong::InvalidOption, msg
          end
          params[:provider] = arg.intern
        when '--verbose'
          params[:verbose] = true
        else
      end
    end
  rescue GetoptLong::InvalidOption => e
    $stderr.write "#{DICTLOOKUP_EXECUTABLE_NAME}: #{e.message}\n"
    exit DICTLOOKUP_ERROR_INVOCATION
  end

  return params
end


def print_text(vocabulary)
  vocabulary.each_pair { |k, v|
    puts "#{k}: #{v.join(', ')}\n"
  }
end


def print_xml(vocabulary)
  $stdout.write "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
  $stdout.write "<vocabulary>\n"
  vocabulary.each_pair { |k, v|
    $stdout.write "  <entry>\n"
    $stdout.write "    <source>#{k}</source>\n"
    $stdout.write "    <target>#{v.join(', ')}</target>\n"
    $stdout.write "  </entry>\n"
  }
  $stdout.write "</vocabulary>\n"
end


def print_html(vocabulary)
  $stdout.write "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
  $stdout.write "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" dir=\"ltr\">\n"
  $stdout.write "<head>\n"
  $stdout.write "  <title>Vocabulary List</title>\n"
  $stdout.write "</head>\n"
  $stdout.write "<body style=\"font-family: sans-serif; margin: 5px; padding 0px;\">\n"
  unless vocabulary.empty?
    $stdout.write "  <table border=\"0\" style=\"width: 100%; border-collapse:collapse;\">\n"
    vocabulary.each_pair { |k, v|
      $stdout.write "    <tr>\n"
      $stdout.write "      <td style=\"border-right: 1px solid black;width:50%;padding:0.5ex 0.5em 0.5ex 0.5em;vertical-align:top;\">#{k}</td>\n"
      $stdout.write "      <td style=\"width:50%;padding:2px;padding:0.5ex 0.5em 0.5ex 0.5em;vertical-align:top;\">#{v.join(', ')}</td>\n"
      $stdout.write "    </tr>\n"
    }
    $stdout.write "  </table>\n"
  end
  $stdout.write "</body>\n"
  $stdout.write "</html>\n"
end


begin # main()

  params = parse_cmd_line
  dictionary = OnlineDictionary::load_dictionary_provider(params)

  result = {}

  ARGF.each_line do |token|
    token.strip!

    if token =~ /([^\[]+)\s*\[([^\]]+)\]/
      token = $1
      hints = $2.gsub(/\s+/, '').split(',')
    else
      hints = []
    end

    result.merge! dictionary.translate(token, hints)
  end

  case params[:format]
    when :text
      print_text(result)
    when :xml
      print_xml(result)
    when :html
      print_html(result)
  end

rescue SystemExit => e
  exit e.status
rescue Exception => e
  $stderr.write "#{DICTLOOKUP_EXECUTABLE_NAME}: #{e.message}\n"
  exit DICTLOOKUP_ERROR_RUNTIME
end

