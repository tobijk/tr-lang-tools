#! /usr/bin/ruby1.9.1
#-*- encoding: utf-8 -*-
#
# Description: Look up words online
# Author:      Tobias Koch <tobias.koch@gmail.com>
# License:     Public Domain
#

INSTALL_DIR = File.expand_path(File.dirname(File.symlink?(__FILE__) ?
  File.readlink(__FILE__) : __FILE__) + '/..')
$LOAD_PATH.unshift INSTALL_DIR + '/lib'

DICTLOOKUP_VERSION = "0.0.1"

DICTLOOKUP_SUCCESS          = 0
DICTLOOKUP_ERROR_INVOCATION = 1
DICTLOOKUP_ERROR_RUNTIME    = 2

DICTLOOKUP_EXECUTABLE_NAME = 'vikisubex'

require 'getoptlong'
require 'dictlookup'


def usage
  $stderr.write "TR Language Tools online dictionary lookup, version #{DICTLOOKUP_VERSION}        \n"
  $stderr.write "Copyright 2012, Tobias Koch <tobias.koch@gmail.com>                              \n"
  $stderr.write "                                                                                 \n"
  $stderr.write "dictlookup [OPTIONS] <files|stdin>                                               \n"
  $stderr.write "                                                                                 \n"
  $stderr.write "OPTIONS:                                                                         \n"
  $stderr.write " --help, -h             Print this help text and exit                            \n"
  $stderr.write " --provider, -p <name>  Which provider to use for the lookup, supported are:     \n"
  $stderr.write "                        * 'pons':   use the Pons Online Dictionary               \n"
  $stderr.write "                        * 'google': use Google Translate                         \n"
  $stderr.write "                                                                                 \n"
end


def parse_cmd_line
  params = { :provider => :pons }

  opts = GetoptLong.new(
    ['--help', '-h', GetoptLong::NO_ARGUMENT ],
    ['--provider', '-p', GetoptLong::REQUIRED_ARGUMENT ]
  )

  begin
    opts.quiet = true
    opts.each do |opt, arg|
      case opt
        when '--help'
          usage
          exit DICTLOOKUP_SUCCESS
        when '--provider'
          unless [ 'pons', 'google' ].include? arg
            msg = "unknown provider '#{arg}"
            raise GetoptLong::InvalidOption, msg
          end
          params[:provider] = arg.intern
        else
      end
    end
  rescue GetoptLong::InvalidOption => e
    $stderr.write "#{DICTLOOKUP_EXECUTABLE_NAME}: #{e.message}\n"
    exit DICTLOOKUP_ERROR_INVOCATION
  end

  return params
end


begin # main()

  params = parse_cmd_line
  dictionary = OnlineDictionary::load_dictionary_provider(params)

  ARGF.each_line do |token|
    token.strip!
    result = dictionary.translate(token)

    unless result.empty?
      puts "#{token}: #{result[token].join(', ')}\n" unless result[token].nil?
    end
  end

rescue Exception => e
  $stderr.write "#{DICTLOOKUP_EXECUTABLE_NAME}: #{e.message}\n"
  exit DICTLOOKUP_ERROR_RUNTIME
end

